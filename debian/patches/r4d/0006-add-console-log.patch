From 7806cd6ca338ec7ede41d8faedd296444766ebc5 Mon Sep 17 00:00:00 2001
From: Benedikt Spranger <b.spranger@linutronix.de>
Date: Fri, 13 Jan 2017 13:17:51 +0100
Subject: [PATCH 6/9] add console log

The console cmd need a TTY for proper functionality. To be able to log
console output into a file without interaction add a consolelog cmd.
The consolelog cmd needs exclusive access to the console and is locked
against other console and consolelog cmds.

Signed-off-by: Benedikt Spranger <b.spranger@linutronix.de>
---
 tools/virsh-console.c |  82 +++++++++++++++++++++++++++++++++-
 tools/virsh-console.h |   5 +++
 tools/virsh-domain.c  | 100 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 185 insertions(+), 2 deletions(-)

diff --git a/tools/virsh-console.c b/tools/virsh-console.c
index e16f841e57..3a5fa0081d 100644
--- a/tools/virsh-console.c
+++ b/tools/virsh-console.c
@@ -20,8 +20,6 @@
 
 #include <config.h>
 
-#ifndef WIN32
-
 # include <sys/types.h>
 # include <sys/stat.h>
 # include <fcntl.h>
@@ -398,6 +396,7 @@ virshGetEscapeChar(const char *s)
 }
 
 
+#ifndef WIN32
 int
 virshRunConsole(vshControl *ctl,
                 virDomainPtr dom,
@@ -516,3 +515,82 @@ virshRunConsole(vshControl *ctl,
 }
 
 #endif /* !WIN32 */
+
+int
+virshRunConsoleLog(virDomainPtr dom,
+                   const char *log_name,
+                   const char *dev_name,
+                   unsigned int flags)
+{
+    virConsolePtr con = NULL;
+    int fd, ret = -1;
+
+    if (log_name) {
+        fd = open(log_name, O_WRONLY|O_CREAT|O_NOCTTY|O_NONBLOCK, 0600);
+        if (fd < 0) {
+            virReportSystemError(errno,
+                                 _("Failed to create log file %s"),
+                                 log_name);
+            goto cleanup;
+        }
+    } else
+        fd = STDOUT_FILENO;
+
+    if (!(con = virConsoleNew()))
+        goto cleanup;
+
+    virObjectLock(con);
+
+    con->st = virStreamNew(virDomainGetConnect(dom),
+                           VIR_STREAM_NONBLOCK);
+    if (!con->st)
+        goto cleanup;
+
+    if (virDomainOpenConsole(dom, dev_name, con->st, flags) < 0)
+        goto cleanup;
+
+    virObjectRef(con);
+    if ((con->stdoutWatch = virEventAddHandle(STDOUT_FILENO,
+                                              0,
+                                              virConsoleEventOnStdout,
+                                              con,
+                                              virObjectFreeCallback)) < 0) {
+        virObjectUnref(con);
+        goto cleanup;
+    }
+
+    virObjectRef(con);
+    if (virStreamEventAddCallback(con->st,
+                                  VIR_STREAM_EVENT_READABLE,
+                                  virConsoleEventOnStream,
+                                  con,
+                                  virObjectFreeCallback) < 0) {
+        virObjectUnref(con);
+        goto cleanup;
+    }
+
+    while (!con->quit) {
+        if (virCondWait(&con->cond, &con->parent.lock) < 0) {
+            virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                           _("unable to wait on console condition"));
+            goto cleanup;
+        }
+    }
+
+    if (con->error.code == VIR_ERR_OK)
+        ret = 0;
+
+ cleanup:
+    virConsoleShutdown(con);
+
+    if (ret < 0) {
+        vshResetLibvirtError();
+        virSetError(&con->error);
+        vshSaveLibvirtHelperError();
+    }
+
+    virObjectUnlock(con);
+    virObjectUnref(con);
+
+    return ret;
+}
diff --git a/tools/virsh-console.h b/tools/virsh-console.h
index e89484d24b..f8000d331c 100644
--- a/tools/virsh-console.h
+++ b/tools/virsh-console.h
@@ -30,3 +30,8 @@ int virshRunConsole(vshControl *ctl,
                     unsigned int flags);
 
 #endif /* !WIN32 */
+
+int virshRunConsoleLog(virDomainPtr dom,
+                       const char *log_name,
+                       const char *dev_name,
+                       unsigned int flags);
diff --git a/tools/virsh-domain.c b/tools/virsh-domain.c
index ccda71d7e0..79d3198e28 100644
--- a/tools/virsh-domain.c
+++ b/tools/virsh-domain.c
@@ -3053,6 +3053,100 @@ cmdConsole(vshControl *ctl, const vshCmd *cmd)
 }
 #endif /* WIN32 */
 
+/*
+ * "consolelog" command
+ */
+static const vshCmdInfo info_consolelog[] = {
+    {.name = "help",
+     .data = N_("connect to the guest console and log the output")
+    },
+    {.name = "desc",
+     .data = N_("Connect the virtual serial console for the guest and log the output")
+    },
+    {.name = NULL}
+};
+
+static const vshCmdOptDef opts_consolelog[] = {
+    VIRSH_COMMON_OPT_DOMAIN_FULL(VIR_CONNECT_LIST_DOMAINS_ACTIVE),
+    {.name = "devname", /* sc_prohibit_devname */
+     .type = VSH_OT_STRING,
+     .help = N_("character device name")
+    },
+    {.name = "logfile",
+     .type = VSH_OT_STRING,
+     .help = N_("console logfile name")
+    },
+    {.name = "force",
+     .type = VSH_OT_BOOL,
+     .help =  N_("force console connection (disconnect already connected sessions)")
+    },
+    {.name = "safe",
+     .type = VSH_OT_BOOL,
+     .help =  N_("only connect if safe console handling is supported")
+    },
+
+    {.name = NULL}
+};
+
+static bool
+cmdRunConsoleLog(vshControl *ctl, virDomainPtr dom,
+                 const char *log_name,
+                 const char *dev_name,
+                 unsigned int flags)
+{
+    bool ret = false;
+    int state;
+
+    if ((state = virshDomainState(ctl, dom, NULL)) < 0) {
+        vshError(ctl, "%s", _("Unable to get domain status"));
+        goto cleanup;
+    }
+
+    if (state == VIR_DOMAIN_SHUTOFF) {
+        vshError(ctl, "%s", _("The domain is not running"));
+        goto cleanup;
+    }
+
+    vshPrintExtra(ctl, _("Connected to domain %s\n"), virDomainGetName(dom));
+    if (virshRunConsoleLog(dom, log_name, dev_name, flags) == 0)
+        ret = true;
+
+ cleanup:
+
+    return ret;
+}
+
+static bool
+cmdConsoleLog(vshControl *ctl, const vshCmd *cmd)
+{
+    virDomainPtr dom;
+    bool ret = false;
+    bool force = vshCommandOptBool(cmd, "force");
+    bool safe = vshCommandOptBool(cmd, "safe");
+    unsigned int flags = 0;
+    const char *name = NULL;
+    const char *logname = NULL;
+
+    if (!(dom = virshCommandOptDomain(ctl, cmd, NULL)))
+        return false;
+
+    if (vshCommandOptStringReq(ctl, cmd, "devname", &name) < 0) /* sc_prohibit_devname */
+        goto cleanup;
+    if (vshCommandOptStringReq(ctl, cmd, "logfile", &logname) < 0)
+        goto cleanup;
+
+    if (force)
+        flags |= VIR_DOMAIN_CONSOLE_FORCE;
+    if (safe)
+        flags |= VIR_DOMAIN_CONSOLE_SAFE;
+
+    ret = cmdRunConsoleLog(ctl, dom, logname, name, flags);
+
+ cleanup:
+    virDomainFree(dom);
+    return ret;
+}
+
 /* "domif-setlink" command
  */
 static const vshCmdInfo info_domif_setlink[] = {
@@ -14119,6 +14213,12 @@ const vshCmdDef domManagementCmds[] = {
      .flags = 0
     },
 #endif
+    {.name = "consolelog",
+     .handler = cmdConsoleLog,
+     .opts = opts_consolelog,
+     .info = info_consolelog,
+     .flags = 0
+    },
     {.name = "cpu-stats",
      .handler = cmdCPUStats,
      .opts = opts_cpu_stats,
-- 
2.23.0

