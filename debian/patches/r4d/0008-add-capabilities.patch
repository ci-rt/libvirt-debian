From e159f8ed78d5a560aa0b7cde6000de4f4134d70c Mon Sep 17 00:00:00 2001
From: Benedikt Spranger <b.spranger@linutronix.de>
Date: Thu, 23 Aug 2018 15:56:50 +0200
Subject: [PATCH 8/9] add-capabilities

---
 src/r4d/Makefile.inc.am |  7 +++-
 src/r4d/r4d_driver.c    | 84 ++++++++++++++++++++++++++++++++++++-----
 2 files changed, 79 insertions(+), 12 deletions(-)

diff --git a/src/r4d/Makefile.inc.am b/src/r4d/Makefile.inc.am
index 4e20a14bad..74619b4e95 100644
--- a/src/r4d/Makefile.inc.am
+++ b/src/r4d/Makefile.inc.am
@@ -13,8 +13,11 @@ USED_SYM_FILES += $(srcdir)/libvirt_r4d.syms
 noinst_LTLIBRARIES += libvirt_driver_r4d.la
 libvirt_la_BUILT_LIBADD += libvirt_driver_r4d.la
 
-libvirt_driver_r4d_la_CFLAGS = $(LIBR4D_CFLAGS)\
-               -I$(srcdir)/conf -I$(srcdir)/r4d $(AM_CFLAGS)
+libvirt_driver_r4d_la_CFLAGS = $(LIBR4D_CFLAGS) \
+		-I$(top_srcdir)/src/access \
+		-I$(srcdir)/conf \
+		-I$(srcdir)/r4d \
+		$(AM_CFLAGS)
 libvirt_driver_r4d_la_SOURCES = $(R4D_DRIVER_SOURCES)
 libvirt_driver_r4d_la_LIBADD = $(LIBR4D_LIBS)
 else ! WITH_R4D
diff --git a/src/r4d/r4d_driver.c b/src/r4d/r4d_driver.c
index d705637804..bbbe711c40 100644
--- a/src/r4d/r4d_driver.c
+++ b/src/r4d/r4d_driver.c
@@ -29,6 +29,7 @@
 #include "virstring.h"
 #include "viruuid.h"
 #include "virfdstream.h"
+#include "viraccessapicheck.h"
 
 #include "r4d_driver.h"
 
@@ -90,6 +91,9 @@ r4dConnectOpen(virConnectPtr conn,
 
     logger (__func__);
 
+    if (virConnectOpenEnsureACL(conn) < 0)
+        return VIR_DRV_OPEN_ERROR;
+
     if (conn->uri == NULL) {
         return VIR_DRV_OPEN_DECLINED;
     } else {
@@ -146,9 +150,13 @@ r4dConnectClose(virConnectPtr conn)
 
 /* connectGetType */
 static const char *
-r4dConnectGetType(virConnectPtr conn ATTRIBUTE_UNUSED)
+r4dConnectGetType(virConnectPtr conn)
 {
     logger (__func__);
+
+    if (virConnectGetTypeEnsureACL(conn) < 0)
+        return NULL;
+
     return "r4d";
 }
 
@@ -161,42 +169,84 @@ r4dConnectGetVersion(virConnectPtr conn,
 
     logger (__func__);
 
+    if (virConnectGetVersionEnsureACL(conn) < 0)
+        return -1;
+
     *version = driver->version;
     return 0;
 }
 
 /* connectGetHostname */
 static char *
-r4dConnectGetHostname(virConnectPtr conn ATTRIBUTE_UNUSED)
+r4dConnectGetHostname(virConnectPtr conn)
 {
     logger (__func__);
+
+    if (virConnectGetHostnameEnsureACL(conn) < 0)
+        return NULL;
+
     return NULL;
 }
 
 /* nodeGetInfo */
 static int
 r4dNodeGetInfo(virConnectPtr conn ATTRIBUTE_UNUSED,
-               virNodeInfoPtr nodeinfo ATTRIBUTE_UNUSED)
+               virNodeInfoPtr nodeinfo)
 {
+    const char *str = "model";
     logger (__func__);
+
+    /* CPU */
+    nodeinfo->nodes = 1;
+    nodeinfo->sockets = 1;
+    nodeinfo->cores = 1;
+    nodeinfo->threads = 1;
+    nodeinfo->cpus = 1;
+    nodeinfo->mhz = 1234;
+
+    if (virStrcpyStatic(nodeinfo->model, str) < 0) {
+        virReportError(VIR_ERR_INTERNAL_ERROR,
+                       _("Model %s too big for destination"), str);
+        goto error;
+    }
+
+    nodeinfo->memory = 876;
+
     return 0;
+error:
+    return -1;
 }
 
 /* connectGetCapabilities */
 static char *
-r4dConnectGetCapabilities(virConnectPtr conn ATTRIBUTE_UNUSED)
+r4dConnectGetCapabilities(virConnectPtr conn)
 {
+    virCapsPtr caps;
+    char *xml;
+
     logger (__func__);
-    return NULL;
+
+    if (virConnectGetCapabilitiesEnsureACL(conn) < 0)
+        return NULL;
+
+    caps = virCapabilitiesNew(VIR_ARCH_NONE, false, false);
+    xml = virCapabilitiesFormatXML(caps);
+    virObjectUnref(caps);
+
+    return xml;
 }
 
 /* connectListDomains */
 static int
-r4dConnectListDomains(virConnectPtr conn ATTRIBUTE_UNUSED,
+r4dConnectListDomains(virConnectPtr conn,
                       int *ids ATTRIBUTE_UNUSED,
                       int nids ATTRIBUTE_UNUSED)
 {
     logger (__func__);
+
+    if (virConnectListDomainsEnsureACL(conn) < 0)
+        return -1;
+
     return 0;
 }
 
@@ -205,6 +255,10 @@ static int
 r4dConnectNumOfDomains(virConnectPtr conn ATTRIBUTE_UNUSED)
 {
     logger (__func__);
+
+    if (virConnectNumOfDomainsEnsureACL(conn) < 0)
+        return -1;
+
     return 0;
 }
 
@@ -226,6 +280,9 @@ r4dConnectListAllDomains(virConnectPtr conn,
 
     virCheckFlags(VIR_CONNECT_LIST_DOMAINS_FILTERS_ALL, -1);
 
+    if (virConnectListAllDomainsEnsureACL(conn) < 0)
+        return -1;
+
     /* check for flags that would produce empty output lists:
      * - persistence: all r4d machines are persistent
      * - managed save: r4d doesn't support managed save
@@ -263,7 +320,7 @@ r4dConnectListAllDomains(virConnectPtr conn,
             goto cleanup;
 
         if (!(dom = virGetDomain(conn, r4d_systemid_name (*tmp),
-				 r4d_systemid_uuid (*tmp), count)))
+                                 r4d_systemid_uuid (*tmp), count)))
             goto cleanup;
 
         doms[count++] = dom;
@@ -302,6 +359,9 @@ r4dConnectListDefinedDomains(virConnectPtr conn,
 
     logger (__func__);
 
+    if (virConnectListDefinedDomainsEnsureACL(conn) < 0)
+        return -1;
+
     list = r4d_list_systemids (driver->endpoint, NULL);
     if (!list) {
         virReportError(VIR_ERR_NO_DOMAIN,
@@ -337,6 +397,9 @@ r4dConnectNumOfDefinedDomains(virConnectPtr conn)
 
     logger (__func__);
 
+    if (virConnectNumOfDefinedDomainsEnsureACL(conn) < 0)
+        return -1;
+
     list = r4d_list_systemids (driver->endpoint, NULL);
     if (!list) {
         virReportError(VIR_ERR_NO_DOMAIN,
@@ -362,6 +425,7 @@ r4dDomainLookupByName(virConnectPtr conn, const char *name)
     virDomainPtr dom = NULL;
 
     logger (__func__);
+
     list = r4d_list_systemids (driver->endpoint, name);
     if (!list) {
         virReportError(VIR_ERR_NO_DOMAIN,
@@ -370,7 +434,7 @@ r4dDomainLookupByName(virConnectPtr conn, const char *name)
     }
 
     dom = virGetDomain(conn, r4d_systemid_name(*list),
-		       r4d_systemid_uuid (*list), -1);
+                       r4d_systemid_uuid (*list), -1);
 
     return dom;
 }
@@ -448,7 +512,7 @@ r4dDomainDestroy(virDomainPtr dom)
 
 /* domainShutdownFlags */
 static int r4dDomainShutdownFlags(virDomainPtr dom,
-				  unsigned int flags ATTRIBUTE_UNUSED)
+                                  unsigned int flags ATTRIBUTE_UNUSED)
 {
     struct r4d_driver *driver = dom->conn->privateData;
     int ret = -1, status;
@@ -475,7 +539,7 @@ cleanup:
 /* domainShutdown */
 static int r4dDomainShutdown(virDomainPtr dom)
 {
-	return r4dDomainShutdownFlags(dom, 0);
+    return r4dDomainShutdownFlags(dom, 0);
 }
 
 /* domainReboot */
-- 
2.23.0

